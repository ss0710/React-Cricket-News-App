{"version":3,"sources":["Components/matches/Card.js","Components/matches/Data.js","Components/players/PlayerCard.js","Components/players/Player.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","parsing","string","s","slice","s1","num","parseInt","num1","state","date","bind","Fragment","this","data","map","match","status","matchStarted","result","toss_winner_team","winner","winner_team","divName","className","data-aos","data-aos-duration","type","call","dateTimeGMT","React","Component","Data","getData","fetch","then","res","json","catch","error","console","log","setState","arr","matches","onClick","PlayerCard","player","src","imageURL","alt","fullName","playingRole","country","born","profile","Player","eventName","event","name","target","value","getPlayer","Pid","url","pid","prevState","players","concat","getPlayerID","swal","placeholder","onChange","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wUAiEeA,G,wDA3DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,QAAU,SAACC,GACP,IAAIC,EAAID,EAAOE,MAAM,EAAE,GACnBC,EAAIH,EAAOE,MAAM,EAAE,GACnBE,EAAMC,SAASJ,GACfK,EAAOD,SAASF,GAapB,OAZAC,GAAY,GACZE,GAAc,KACL,KAELA,EAAKF,EAAM,GACXA,KAEDA,GAAK,KAEJA,GAAY,IAGTA,EAAM,IAAME,EAAZF,OAxBP,EAAKG,MAAM,CACPC,KAAK,IAET,EAAKT,QAAU,EAAKA,QAAQU,KAAb,gBALD,E,qDA6BT,IAAD,OAIJ,OACI,kBAAC,IAAMC,SAAP,KACI,6BAGQC,KAAKb,MAAMc,KAAKC,KAAI,SAACC,GACjB,IAAMC,EAASD,EAAME,aAAN,4BAA0CF,EAAMN,KAAKN,MAAM,EAAE,KAA7D,mBAAiFY,EAAMN,KAAKN,MAAM,EAAE,KAC7Ge,EAASH,EAAME,aAAN,6BAA2CF,EAAMI,kBAAjD,GACTC,EAASL,EAAME,aAAN,wBAAsCF,EAAMM,aAA5C,GACTC,EAAWP,EAAME,aAAe,cAAgB,cACzD,OAAO,yBAAKM,UAAS,UAAKD,GAAWE,WAAS,UAAUC,oBAAkB,QACtE,4BAAKV,EAAMW,MACX,sCAAQV,IACR,4BAAKD,EAAM,UAAX,IAAsB,uBAAGQ,UAAU,MAAb,MAAtB,IAAgDR,EAAM,WACtD,sCAAY,EAAKf,QAAQ2B,KAAM,EAAMZ,EAAMa,YAAYzB,MAAM,GAAG,MAChE,sCAAQe,IACR,sCAAQE,c,GAnDlBS,IAAMC,YCuCVC,G,wDAtCX,WAAYhC,GAAO,IAAD,8BACd,cAAMA,IAOTiC,QAAU,WAESC,MADL,uEACgBC,MAAK,SAACC,GAC7B,OAAOA,EAAIC,UACZC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MACbJ,MAAK,SAACC,GACL,EAAKM,SAAS,CACVC,IAAIP,EAAIQ,UAEZJ,QAAQC,IAAI,EAAKhC,MAAMkC,QACxBL,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAlBhB,EAAK9B,MAAM,CACPkC,IAAI,IAHM,E,qDA2Bd,OACI,kBAAC,IAAM/B,SAAP,KACE,yBAAKY,UAAU,WACf,4BAAQqB,QAAShC,KAAKoB,SAAtB,gBACA,kBAAC,EAAD,CAAMnB,KAAMD,KAAKJ,MAAMkC,Y,GAhClBb,IAAMC,YC6BVe,G,8DA5BX,WAAY9C,GAAO,uCACTA,G,qDAKN,OACI,kBAAC,WAAD,KACI,6BAEIa,KAAKb,MAAMc,KAAKC,KAAI,SAACgC,GACjB,OAAO,yBAAKvB,UAAU,iBAAiBC,WAAS,UAAUC,oBAAkB,QACxE,yBAAMF,UAAU,aAAawB,IAAG,UAAKD,EAAOE,UAAYC,IAAI,iBAC5D,4BAAKH,EAAOI,UACZ,4BAAKJ,EAAOK,aACZ,4BAAKL,EAAOM,SACZ,qCAAWN,EAAOO,MAClB,wCAAa,6BAAb,IAAoBP,EAAOQ,SAC3B,uC,GAnBHzB,IAAMC,Y,iBCkFhByB,E,kDAhFX,WAAYxD,GAAO,IAAD,8BACd,cAAMA,IAWVyD,UAAU,SAACC,GACP,EAAKhB,SAAS,CACViB,KAAKD,EAAME,OAAOC,SAdR,EAkBlBC,UAAY,WACR,EAAKrD,MAAMsD,IAAIhD,KAAI,SAAC4B,GAChB,IAAMqB,EAAG,kDAA6CrB,EAAIsB,IAAjD,wCACG/B,MAAM8B,GAAK7B,MAAK,SAACC,GAC7B,OAAOA,EAAIC,UACZC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MACbJ,MAAK,SAACC,GACL,EAAKM,UAAS,SAACwB,GACX,MAAM,CACJC,QAASD,EAAUC,QAAQC,OAAOhC,UAGzCE,OAAM,SAACC,GACNC,QAAQC,IAAIF,UAhCF,EAwClB8B,YAAc,WACV,GAAG,EAAK5D,MAAMkD,KACd,CACA,EAAKjB,SAAS,CACVyB,QAAQ,KAEZ,IAAMH,EAAG,oDAA+C,EAAKvD,MAAMkD,KAA1D,wCACOzB,MAAM8B,GAAK7B,MAAK,SAACC,GAC7B,OAAOA,EAAIC,UACZC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MACbJ,MAAK,SAACC,GACL,EAAKM,SAAS,CACVqB,IAAI3B,EAAItB,OAEZ,EAAKgD,YACLtB,QAAQC,IAAIL,EAAItB,SACjBwB,OAAM,SAACC,GACNC,QAAQC,IAAIF,WAGhB+B,IAAK,8BAA8B,GAAG,UA3DtC,EAAK7D,MAAM,CACPkD,KAAK,GACLI,IAAI,GACJI,QAAQ,IAEZ,EAAKV,UAAY,EAAKA,UAAU9C,KAAf,gBACjB,EAAK0D,YAAc,EAAKA,YAAY1D,KAAjB,gBACnB,EAAKmD,UAAY,EAAKA,UAAUnD,KAAf,gBATH,E,qDAoEd,OACI,kBAAC,WAAD,KACI,yBAAKa,UAAU,cACX,2BAAOqC,MAAOhD,KAAKJ,MAAMkD,KAAMY,YAAY,iBAAiBC,SAAU3D,KAAK4C,YAAmB,6BAC9F,4BAAQZ,QAAShC,KAAKwD,aAAtB,UACA,kBAAC,EAAD,CAAYvD,KAAMD,KAAKJ,MAAM0D,gB,GA1E5BrC,IAAMC,W,eCgBZ0C,MAdf,WACE,OACE,yBAAKjD,UAAU,OACf,+CACA,kBAAC,IAAD,CAAMkD,GAAG,YAAW,4BAAQlD,UAAU,iBAAlB,0BAAuE,6BAC3F,kBAAC,IAAD,CAAMkD,GAAG,YAAW,4BAAQlD,UAAU,iBAAlB,oBACpB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,WAAWC,UAAW7C,IACxC,kBAAC,IAAD,CAAO4C,KAAK,WAAWC,UAAWrB,OCHlBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjE,MACvB,2DCXNkE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqD,c","file":"static/js/main.3e12ee6a.chunk.js","sourcesContent":["import { ContactSupportOutlined } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport card from './card.css';\r\n\r\nclass Card extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            date:\"\"\r\n        };\r\n        this.parsing = this.parsing.bind(this);\r\n    }\r\n\r\n\r\n    parsing = (string) => {\r\n        var s = string.slice(0,2);\r\n        var s1= string.slice(3,5);\r\n        var num = parseInt(s);\r\n        var num1 = parseInt(s1);\r\n        num = num + 5; \r\n        num1 = num1 + 30;  \r\n        if(num1>=60)\r\n        {\r\n            num1=num % 60;\r\n            num++;\r\n        }\r\n        if(num>=24)\r\n        {\r\n            num = num % 24;\r\n        }\r\n\r\n        return(num + \":\" + num1 + \":\" +  \"00\");\r\n    }\r\n\r\n    render(){\r\n\r\n        \r\n\r\n        return(\r\n            <React.Fragment>\r\n                <div >\r\n                    {\r\n\r\n                        this.props.data.map((match)=>{\r\n                            const status = match.matchStarted ? `match finished on ${match.date.slice(0,10)}` : `match on ${match.date.slice(0,10)}`;\r\n                            const result = match.matchStarted ? `Toss winner team : ${match.toss_winner_team}` : ``\r\n                            const winner = match.matchStarted ? `winning Team: ${match.winner_team}` : ``;\r\n                            const divName  = match.matchStarted ? \"details_two\" : \"details_one\";\r\n                         return <div className={`${divName}`} data-aos=\"fade-in\" data-aos-duration=\"2000\">\r\n                             <h3>{match.type}</h3>\r\n                             <h4>{`${status}`}</h4>\r\n                             <h2>{match['team-1']} <p className=\"Vs\">VS</p> {match['team-2']}</h2>\r\n                             <h4>Time : {this.parsing.call( this, match.dateTimeGMT.slice(11,19))}</h4>\r\n                             <h4>{`${result}`}</h4>\r\n                             <h4>{`${winner}`}</h4>\r\n                         </div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './App.css';\r\n\r\nclass Data extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            arr:[]\r\n        }\r\n        \r\n    }\r\n\r\n     getData = () => {\r\n        const url ='https://cricapi.com/api/matches?apikey=F3jEhg9WbiabVALAsStkwrHfj702';\r\n        const promise = fetch(url).then((res)=>{\r\n            return res.json();\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        }).then((res)=>{\r\n            this.setState({\r\n                arr:res.matches\r\n            })\r\n            console.log(this.state.arr)\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n              <div className=\"div_one\">\r\n              <button onClick={this.getData}>View Matches</button>\r\n              <Card data={this.state.arr}/>\r\n              </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Data;","import { Height } from '@material-ui/icons';\r\nimport React, { Fragment } from 'react';\r\nimport './playercard.css';\r\n\r\nclass PlayerCard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                {\r\n                    this.props.data.map((player)=>{\r\n                        return <div className=\"playerCard_div\" data-aos=\"fade-in\" data-aos-duration=\"2000\">\r\n                            <img  className=\"Player-img\" src={`${player.imageURL}`} alt=\"Player-image\"/>\r\n                            <h2>{player.fullName}</h2>\r\n                            <h3>{player.playingRole}</h3>\r\n                            <h3>{player.country}</h3>\r\n                            <h4>Born: {player.born}</h4> \r\n                            <h5>Profile: <br/> {player.profile}</h5>\r\n                            <h4></h4>\r\n                        </div>\r\n                    })\r\n                }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerCard;","import React, { Fragment } from 'react';\r\nimport player from './player.css';\r\nimport PlayerCard from './PlayerCard';\r\nimport swal from 'sweetalert';\r\n\r\nclass Player extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"\",\r\n            Pid:[],\r\n            players:[],\r\n        }\r\n        this.eventName = this.eventName.bind(this);\r\n        this.getPlayerID = this.getPlayerID.bind(this);\r\n        this.getPlayer = this.getPlayer.bind(this);\r\n    }\r\n\r\n    eventName=(event)=>{\r\n        this.setState({\r\n            name:event.target.value\r\n        })\r\n    }\r\n\r\n    getPlayer = () => {\r\n        this.state.Pid.map((arr)=>{\r\n            const url =`https://cricapi.com/api/playerStats?pid=${arr.pid}&apikey=F3jEhg9WbiabVALAsStkwrHfj702`;\r\n        const promise = fetch(url).then((res)=>{\r\n            return res.json();\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        }).then((res)=>{\r\n            this.setState((prevState) => {\r\n                return{\r\n                  players: prevState.players.concat(res),\r\n                };\r\n              });\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        });\r\n        })\r\n        \r\n    }\r\n\r\n\r\n\r\n    getPlayerID = () => {\r\n        if(this.state.name)\r\n        {\r\n        this.setState({\r\n            players:[]\r\n        })\r\n        const url =`https://cricapi.com/api/playerFinder?name=${this.state.name}&apikey=F3jEhg9WbiabVALAsStkwrHfj702`;\r\n        const promise = fetch(url).then((res)=>{\r\n            return res.json();\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        }).then((res)=>{\r\n            this.setState({\r\n                Pid:res.data\r\n            });\r\n            this.getPlayer();\r\n            console.log(res.data);\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        });\r\n    }else{\r\n        swal(\"Type a name and then search\",\"\",\"error\");\r\n    }\r\n}\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <Fragment>\r\n                <div className=\"Player_div\">\r\n                    <input value={this.state.name} placeholder=\"search name...\" onChange={this.eventName}></input><br/>\r\n                    <button onClick={this.getPlayerID}>SEARCH</button>\r\n                    <PlayerCard data={this.state.players}/>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\nimport Data from './Components/matches/Data';\nimport './Components/matches/App.css';\nimport Player from './Components/players/Player';\nimport {Route , Switch} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>CRICKET UPDATES</h1>\n    <Link to=\"/matches\"><button className=\"Router-button\">View Upcoming Matches</button></Link><br/>\n    <Link to=\"/players\"><button className=\"Router-button\">Search A Player</button></Link>\n    <Switch>\n    <Route exact path='/matches' component={Data}/>\n    <Route path='/players' component={Player}/>\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}